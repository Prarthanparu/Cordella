{"ast":null,"code":"var _jsxFileName = \"/Users/prarthanparu/Downloads/Cordelia/src/views/cruise-routes/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRoutes } from '../../redux/actions/routeAction';\nimport NotificationBanner from \"../../components/NotificationBanner/NotificationBanner\";\nimport Header from \"../../components/Header/Header\";\nimport SearchComponent from \"../../components/SearchComponent/SearchComponent\";\nimport Footer from \"../../components/Footer/Footer\";\nimport CruiseRoutesCards from \"../../components/Cards/CruiseRoutesCards\";\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction CruiseRoutes() {\n  _s();\n\n  const dispatch = useDispatch();\n  const [routes, setRoutes] = useState([]);\n  const {\n    routeData\n  } = useSelector(state => ({\n    routeData: state.route.routeData\n  }));\n  useEffect(async () => {\n    await dispatch(getRoutes());\n  }, []);\n  useEffect(async () => {\n    setRoutes(routeData);\n  }, [routeData]);\n\n  const onFilterApplied = filters => {\n    if (routeData && filters.length != 0) {\n      setRoutes(routeData.filter(route => route.itineraries.filter(itinerary => filters.includes(itinerary.nightCount.toString())).length != 0));\n    } else {\n      setRoutes(routeData);\n    }\n  };\n\n  const onSortApplied = sortBy => {\n    console.log(sortBy);\n\n    if (routeData && sortBy) {\n      setRoutes(routes.sort(x => x.itineraries[0].nightCount));\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"Home\",\n    children: [/*#__PURE__*/_jsxDEV(NotificationBanner, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchComponent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CruiseRoutesCards, {\n      filterBy: onFilterApplied,\n      sortBy: onSortApplied\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CruiseRoutesCards.TravelItineraryCards, {\n      routeData: routes\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n}\n\n_s(CruiseRoutes, \"u9MwNXBGesSl4RIpcNdzxIbUAIs=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = CruiseRoutes;\nexport default CruiseRoutes;\n\nvar _c;\n\n$RefreshReg$(_c, \"CruiseRoutes\");","map":{"version":3,"sources":["/Users/prarthanparu/Downloads/Cordelia/src/views/cruise-routes/index.js"],"names":["React","useState","useEffect","useDispatch","useSelector","getRoutes","NotificationBanner","Header","SearchComponent","Footer","CruiseRoutesCards","CruiseRoutes","dispatch","routes","setRoutes","routeData","state","route","onFilterApplied","filters","length","filter","itineraries","itinerary","includes","nightCount","toString","onSortApplied","sortBy","console","log","sort","x"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,SAAT,QAA0B,iCAA1B;AACA,OAAOC,kBAAP,MAA+B,wDAA/B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,eAAP,MAA4B,kDAA5B;AACA,OAAOC,MAAP,MAAmB,gCAAnB;AACA,OAAOC,iBAAP,MAA8B,0CAA9B;AACA,OAAO,aAAP;;;AAGA,SAASC,YAAT,GAAwB;AAAA;;AACtB,QAAMC,QAAQ,GAAGT,WAAW,EAA5B;AACA,QAAM,CAACU,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM;AAAEc,IAAAA;AAAF,MAAgBX,WAAW,CAAEY,KAAD,KAAY;AAC5CD,IAAAA,SAAS,EAAEC,KAAK,CAACC,KAAN,CAAYF;AADqB,GAAZ,CAAD,CAAjC;AAIAb,EAAAA,SAAS,CAAC,YAAY;AACpB,UAAMU,QAAQ,CAACP,SAAS,EAAV,CAAd;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,YAAY;AACpBY,IAAAA,SAAS,CAACC,SAAD,CAAT;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,QAAMG,eAAe,GAAIC,OAAD,IAAa;AACnC,QAAGJ,SAAS,IAAII,OAAO,CAACC,MAAR,IAAkB,CAAlC,EAAoC;AAClCN,MAAAA,SAAS,CAACC,SAAS,CAACM,MAAV,CAAiBJ,KAAK,IAC9BA,KAAK,CAACK,WAAN,CAAkBD,MAAlB,CAA0BE,SAAS,IAAIJ,OAAO,CAACK,QAAR,CAAiBD,SAAS,CAACE,UAAV,CAAqBC,QAArB,EAAjB,CAAvC,EAA0FN,MAA1F,IAAoG,CAD5F,CAAD,CAAT;AAGD,KAJD,MAIK;AACHN,MAAAA,SAAS,CAACC,SAAD,CAAT;AACD;AACF,GARD;;AAUA,QAAMY,aAAa,GAAIC,MAAD,IAAY;AAChCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AACA,QAAGb,SAAS,IAAIa,MAAhB,EAAuB;AACrBd,MAAAA,SAAS,CAACD,MAAM,CAACkB,IAAP,CAAYC,CAAC,IAAEA,CAAC,CAACV,WAAF,CAAc,CAAd,EAAiBG,UAAhC,CAAD,CAAT;AACD;AACF,GALD;;AAOA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE,QAAC,iBAAD;AAAmB,MAAA,QAAQ,EAAEP,eAA7B;AAA8C,MAAA,MAAM,EAAES;AAAtD;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE,QAAC,iBAAD,CAAmB,oBAAnB;AAAwC,MAAA,SAAS,EAAEd;AAAnD;AAAA;AAAA;AAAA;AAAA,YALF,eAME,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YANF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA1CQF,Y;UACUR,W,EAEKC,W;;;KAHfO,Y;AA4CT,eAAeA,YAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getRoutes } from '../../redux/actions/routeAction';\nimport NotificationBanner from \"../../components/NotificationBanner/NotificationBanner\";\nimport Header from \"../../components/Header/Header\";\nimport SearchComponent from \"../../components/SearchComponent/SearchComponent\";\nimport Footer from \"../../components/Footer/Footer\";\nimport CruiseRoutesCards from \"../../components/Cards/CruiseRoutesCards\";\nimport './index.css';\n\n\nfunction CruiseRoutes() {\n  const dispatch = useDispatch();\n  const [routes, setRoutes] = useState([]);\n  const { routeData } = useSelector((state) => ({\n    routeData: state.route.routeData\n  }));\n\n  useEffect(async () => {\n    await dispatch(getRoutes());\n  }, []);\n\n  useEffect(async () => {\n    setRoutes(routeData);\n  }, [routeData]);\n\n  const onFilterApplied = (filters) => {\n    if(routeData && filters.length != 0){\n      setRoutes(routeData.filter(route=>\n        route.itineraries.filter( itinerary => filters.includes(itinerary.nightCount.toString())).length != 0\n      ));\n    }else{\n      setRoutes(routeData);\n    }\n  }\n\n  const onSortApplied = (sortBy) => {\n    console.log(sortBy);\n    if(routeData && sortBy){\n      setRoutes(routes.sort(x=>x.itineraries[0].nightCount));\n    }\n  }\n\n  return (\n    <div className=\"Home\">\n      <NotificationBanner />\n      <Header />\n      <SearchComponent />\n      <CruiseRoutesCards filterBy={onFilterApplied} sortBy={onSortApplied}/>\n      <CruiseRoutesCards.TravelItineraryCards routeData={routes} />\n      <Footer />\n    </div>\n  );\n}\n\nexport default CruiseRoutes;\n"]},"metadata":{},"sourceType":"module"}